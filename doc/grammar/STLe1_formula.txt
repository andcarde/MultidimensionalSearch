Formula Syntax
--------------

Formulas are written in Lisp-like form, the syntax is described below. Formulas
are CASE-SENSITIVE. You may split the formula across multiple lines, a line
break counts as a whitespace.

Every formula produces a real-valued satisfaction signal (represented using
double-precision numbers). In the output, numbers '0' and '1' represent Boolean 
values 'false' and 'true'. Functions that accept Boolean arguments ('and', 'or', 
etc) are more relaxed: they interpret '0' as 'false' and any non-zero value as 
'true'.


Basic Elements of the Syntax
----------------------------

<NUMBER> ::= Floating-point number | inf | -inf

A number should be a decimal floating-point number, e.g., '0', '1.5', etc.
Special constants 'inf' and '-inf' denote floating point infinity and negative
infinity.


<BOOLEAN> ::= false | true

A Boolean constant.


<INTERVAL> ::= (<NUMBER> <NUMBER>)

Interval is a pair of numbers -- lower and upper bound -- put in parenthesis.
Lower bound should not be greater than the upper bound. Upper bound can be
'inf'. The bounds of the interval are interpreted as closed.

Intervals should refer to the future, i.e., lower bound should not be negative.


<VARIABLE> ::= x<INTEGER>

Variables in the formula refer to the input signals. The name of a variable
should be 'x' followed by a number. The variable 'x0' refers to the first
component of the input signal (first non-timestamp column of the CSV file), 
'x1' refers to the second component, etc.


STL Formulas
------------

STL formulas have the following syntax.

<FORMULA> ::=
    <VARIABLE>  |
    <NUMBER>    |
    <BOOLEAN>   |
    (<FUNCTION> <FORMULA>*)   |
    (F <INTERVAL> <FORMULA>)  |
    (G <INTERVAL> <FORMULA>)  |
    (StlUntil <INTERVAL> <FORMULA> <FORMULA>)
  
Different types of formulas are explained below.


<VARIABLE>

A variable refers to an input signal as described above.


<NUMBER>

The outputs signal is a constant signal with the given value.


<BOOLEAN>

Boolean 'false' evaluates to '0', and 'true' evaluates to '1'.


(<FUNCTION> <FORMULA>*)

Application of a function. To produce the output signal, the function is applied
to the input signals point-wise. Supported functions are listed below.

Arithmetic:

min    max    +    -    /    *    abs

Comparisons:

<    <=    >    >=

Logical operators:

and    or    not    ->

Misc:

ite     A ternary function. If the first argument is non-zero, returns the
        second argument, otherwise returns the third argument.
        For example '(ite (>= x0 0) x0 -inf)' returns 'x0' if 'x0' is
        non-negative, and negative infinity otherwise.


(F <INTERVAL> <FORMULA>)
(G <INTERVAL> <FORMULA>)

STL operators 'eventually' and 'always'.
For example, '(G (0 inf) (>= x0 0))' asserts that 'x0' is always non-negative.
Recall that the interval (1st argument) is interpreted as closed.


(StlUntil <INTERVAL> <FORMULA> <FORMULA>)

STL operator 'until' with non-strict semantics. For the 'until' to hold at time 
't':
- the second formula (3rd argument) should hold at some time 't1' in the future,
  within the given interval (1st argument) relative to 't',
- the first formula (2nd argument) should hold continuously on '[t, t1]'.

  
Formulas in the Extension of STL
--------------------------------

The extension allows to evaluate minima and maxima over intervals. Computation 
of minimum or maximum is specified in a formula by an aggregate expression:

<AGGREGATE> ::=
    (Min <FORMULA>)
    (Max <FORMULA>)
    (D <FORMULA>)
    (I <FORMULA>)
    
An aggregate expression is used as a sub-expression for On- and Until-formulas,
which are described below.

<FORMULA> (continued from above) ::=
    (On <INTERVAL> <AGGREGATE>)
    (Until <INTERVAL> <NUMBER> <AGGREGATE> <FORMULA>)
    (Until <INTERVAL> <NUMBER> (Get <FORMULA>) <FORMULA>)
    (Lookup <NUMBER> <NUMBER> <FORMULA>)

Different types of formulas are explained below.


(On <INTERVAL> <AGGREGATE>)

Prescribes to compute an aggregate expression over a sliding interval.
For example, for '(On (1 10) (Max x0))' the value of the output signal at time
't' is the maximum of 'x0' on the interval '[t+1, t+10]'.


(Until <INTERVAL> <NUMBER> <AGGREGATE> <FORMULA>)

The value of the output signal at time 't' is defined as follows:
1. Find the earliest time point 't1', such that 't1' is within the given
   interval (1st argument) relative to 't', and the given formula (4th argument) 
   holds at 't1' (the value of its output signal is non-zero).
2. If such time point exists, compute the given aggregate expression (3rd 
   argument) on the interval '[t, t1]'.
3. Otherwise, return the given default value (2nd argument).


(Until <INTERVAL> <NUMBER> (Get <FORMULA>) <FORMULA>)

Similar, but instead of computing the value of an aggregate expression, get the
value of another formula (3rd argument, under 'Get') at time 't1'.


(Lookup <NUMBER> <NUMBER> <FORMULA>)

Look up the value of (the output signal of) the given formula at a fixed delay
in the future. The value of the output signal at time 't' is:
- The value of the output signal of the given formula (3rd argument) at time
  't + given delay (1st argument)' if this time point is before the end
  of the signal.
- The given default value (2nd argument) otherwise.
