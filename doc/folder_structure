Ámbito del programa
El programa ParetoLib, está escrito en Python, un lenguaje interpretado de bajo tipado, y se ejecuta en un entorno multiplataforma.
La estructura del proyecto está compuesta por los siguientes ficheros y carpetas (en negrilla los elementos clave):
.pytest_cache: Archivo que alberga el caché generado por la herramienta PyTest.
build: Carpeta que contiene los ficheros de Python de la “última interpretación”. Cuando hay modificaciones en el código a la hora de ejecutar el código, se interpreta para garantizar la ausencia de errores sintácticos en el código y el correcto enlazado de ficheros.
doc: Archivo de documentación del proyecto. Contiene una demo, capturas de pantalla de la ejecución, el artículo “Learning Pareto Fronts From Membership Queries” que explica los algoritmos utilizados en la búsqueda multidimensional y una lista de ficheros Python que sirven de ejemplo de entrada.
ParetoLib: Archivo que comprende la biblioteca ParetoLib en cuestión y que contiene todo el código de la misma.
ParetoLib.egg-info
Projects: Carpeta de datos que actúa de localización predeterminada para los proyectos que integran bloques de código STLe2.
Tests: Carpeta donde se almacenan los ficheros de Python relacionados con la ejecución de tests, tanto automáticos (comienzan por “test_”) como manuales (se ejecutan desde el entorno de desarrollo se verifican humanamente).
.bumpversion.cfg: Es un archivo de configuración que se utiliza con la herramienta bumpversion para automatizar el versionado de proyectos. Esta herramienta se usa en entornos de desarrollo de software para actualizar y gestionar las versiones de los proyectos de manera consistente. En este fichero se indican instrucciones detalladas sobre cómo bumpversion debe actualizar y registrar la versión en un archivo específico dentro del proyecto.
.gitattributes: El archivo .gitattributes se utiliza en entornos controlados por Git para definir el tratamiento de los archivos dentro de un repositorio. Ofrece instrucciones específicas para situaciones como la normalización de fin de línea, la gestión de archivos binarios, la asociación de tipos MIME, la asignación de merge drivers y la definición de comportamientos que interactúan con determinados atributos de fichero.
.gitignore: Es un fichero que indica reglas que cumple el sistema a la hora de realizar un commit del proyecto. Estas reglas permiten ignorar carpetas y ficheros específicos.
.gitlab-ci.yml: Es un archivo de configuración empleado en el entorno de desarrollo y despliegue continuo (CI/CD) con GitLab. Describe las etapas y tareas a realizar durante la construcción y prueba de un proyecto escrito en Python. Además, establece comandos específicos para instalar dependencias, construir el proyecto, realizar pruebas y generar un reporte de cobertura de pruebas.
En resumen, este archivo define las acciones a realizar durante las etapas de construcción y prueba del proyecto. CONTRIB: Lista de contribuidores al proyecto.
install.bat: Script en Windows para instalar las dependencias con bibliotecas.
install.sh: Script en Linux para instalar las dependencias con bibliotecas.
install_cython.bat: Script en Windows para instalar Cython.
install_cython.sh: Script en Linux para instalar Cython.
LICENSE: Fichero de documentación que indica la licencia del proyecto (GNU General Public License).
README.md: Fichero de documentación del proyecto donde se describe el mismo, se indica como realizar la instalación y como ejecutarlo.
release.sh: Script para Linux para realizar un release con el estado actual del proyecto.
requeriments.txt: Lista de dependencias del proyecto con bibliotecas. Contiene el nombre y las versiones soportadas de cada biblioteca.
setup.py: Fichero python para definir propiedades del proyecto.
setup_cython.py: Fichero python para incorporar en el sistema Cython las propiedades del proyecto.
test.bat: Script para Windows que ejecuta los tests.
test.sh: Script para Linux que ejecuta los tests.
